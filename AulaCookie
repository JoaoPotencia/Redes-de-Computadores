from http.server import BaseHTTPRequestHandler, HTTPServer
from socketserver import ThreadingMixIn

from random import randint

sessions = {}

addr = '0.0.0.0'
port = 8088

SESSION_ID_LEN = 10

class SessionHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        
        self.cookie = None
        try:
            response = 200
            cookies = self.parse_cookies(self.headers["Cookie"])

            if cookies:
                if 'session_id' in cookies:
                    sid = cookies['session_id']
                    sessions[sid] +=1
                    content = f'<html><body><h1>Qual a potencia desse cavalo:  {sessions[sid]}.</h1><img src="https://i.pinimg.com/236x/aa/e1/3d/aae13d5bbbeb503219e92ceeaf15ed01.jpg" alt="MosquitÃ£o"></body></html>'
                    
            
            else:
                content = '<html><body><h1>Hoje o dia esta bonito.<h1></body></html>'
                sid = self.generate_sid()
                sessions[sid] = 1
                self.cookie = f'session_id={sid}'

        except:
            response = 404
            content = '<html><body>Erro ao processar a pagina.</body></html>'

            sid = self.generate_sid()
            sessions[sid] = 1
            self.cookie = f'session_id={sid}'

        self.send_response(response)
        self.send_header('Content-type','text/html')
        
        if self.cookie:
            self.send_header('Set-Cookie',self.cookie)
        
        
        self.end_headers()

        self.wfile.write(bytes(content, 'utf-8'))
        return
    
    def generate_sid(self):
        return "".join(str(randint(0,9)) for _ in range(SESSION_ID_LEN) )

    def parse_cookies(self, cookie_list):
        return dict(((c.split("=")) for c in cookie_list.split(";"))) if cookie_list else {}


class ThreadedHTTPServer(ThreadingMixIn, HTTPServer):
    pass


def main():
    try:
        server = ThreadedHTTPServer((addr, port), SessionHandler)
        server.serve_forever()
    except KeyboardInterrupt:
        print('Exiting Server')
        server.socket.close


if __name__ == '__main__':
    main()
